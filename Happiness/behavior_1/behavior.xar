<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Goto Posture" id="1" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="120" y="22">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
              <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                <Choice value="Crouch" />
                <Choice value="LyingBack" />
                <Choice value="LyingBelly" />
                <Choice value="Sit" />
                <Choice value="SitRelax" />
                <Choice value="StandInit" />
                <Choice value="Stand" />
                <Choice value="StandZero" />
              </Parameter>
              <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
              <Resource name="All motors" type="Lock" timeout="0" />
              <Resource name="Stiffness" type="Lock" timeout="0" />
            </Box>
            <Box name="Disco" id="16" localization="8" tooltip="ID : #04B 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Disco" x="128" y="478">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="398">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                    <Key frame="42" value="-42.7" />
                    <Key frame="62" value="16.6" />
                    <Key frame="85" value="-42.7" />
                    <Key frame="105" value="16.6" />
                    <Key frame="127" value="-42.7" />
                    <Key frame="147" value="16.6" />
                    <Key frame="170" value="-42.7" />
                    <Key frame="190" value="16.6" />
                    <Key frame="217" value="42.7" />
                    <Key frame="237" value="-16.6" />
                    <Key frame="260" value="42.7" />
                    <Key frame="280" value="-16.6" />
                    <Key frame="301" value="42.7" />
                    <Key frame="321" value="-16.6" />
                    <Key frame="343" value="42.7" />
                    <Key frame="363" value="-16.6" />
                    <Key frame="396" value="0.524941" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                    <Key frame="42" value="-27.3" />
                    <Key frame="62" value="19.4" />
                    <Key frame="85" value="-27.3" />
                    <Key frame="105" value="19.4" />
                    <Key frame="127" value="-27.3" />
                    <Key frame="147" value="19.4" />
                    <Key frame="170" value="-27.3" />
                    <Key frame="190" value="19.4" />
                    <Key frame="217" value="-27.3" />
                    <Key frame="237" value="19.4" />
                    <Key frame="260" value="-27.3" />
                    <Key frame="280" value="19.4" />
                    <Key frame="301" value="-27.3" />
                    <Key frame="321" value="19.4" />
                    <Key frame="343" value="-27.3" />
                    <Key frame="363" value="19.4" />
                    <Key frame="396" value="-9.84628" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="21" value="36.6484" />
                    <Key frame="42" value="100.106" />
                    <Key frame="62" value="106.347" />
                    <Key frame="85" value="100.106" />
                    <Key frame="105" value="106.347" />
                    <Key frame="127" value="100.106" />
                    <Key frame="147" value="106.347" />
                    <Key frame="170" value="100.106" />
                    <Key frame="190" value="106.347" />
                    <Key frame="204" value="69.6" />
                    <Key frame="219" value="-68.2895" />
                    <Key frame="239" value="57.0441" />
                    <Key frame="262" value="-68.2895" />
                    <Key frame="282" value="57.0441" />
                    <Key frame="303" value="-68.2895" />
                    <Key frame="323" value="57.0441" />
                    <Key frame="345" value="-68.2895" />
                    <Key frame="365" value="57.0441" />
                    <Key frame="385" value="61" />
                    <Key frame="398" value="84.2858" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="21" value="19.5096" />
                    <Key frame="42" value="13.8845" />
                    <Key frame="62" value="11.2477" />
                    <Key frame="85" value="13.8845" />
                    <Key frame="105" value="11.2477" />
                    <Key frame="127" value="13.8845" />
                    <Key frame="147" value="11.2477" />
                    <Key frame="170" value="13.8845" />
                    <Key frame="190" value="11.2477" />
                    <Key frame="204" value="9.5" />
                    <Key frame="219" value="18.8112" />
                    <Key frame="229" value="34.1" />
                    <Key frame="239" value="-18" />
                    <Key frame="251" value="34.1" />
                    <Key frame="262" value="18.8112" />
                    <Key frame="272" value="34.1" />
                    <Key frame="282" value="-18" />
                    <Key frame="294" value="34.1" />
                    <Key frame="303" value="18.8112" />
                    <Key frame="313" value="34.1" />
                    <Key frame="323" value="-18" />
                    <Key frame="335" value="34.1" />
                    <Key frame="345" value="18.8112" />
                    <Key frame="355" value="34.1" />
                    <Key frame="365" value="-18" />
                    <Key frame="377" value="34.1" />
                    <Key frame="398" value="8.78677" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="21" value="-37.5322" />
                    <Key frame="32" value="-101.1" />
                    <Key frame="42" value="-21.7996" />
                    <Key frame="62" value="-35.4228" />
                    <Key frame="85" value="-21.7996" />
                    <Key frame="105" value="-35.4228" />
                    <Key frame="127" value="-21.7996" />
                    <Key frame="147" value="-35.4228" />
                    <Key frame="170" value="-21.7996" />
                    <Key frame="190" value="-35.4228" />
                    <Key frame="204" value="-94.9" />
                    <Key frame="219" value="48.7823" />
                    <Key frame="229" value="4.3" />
                    <Key frame="239" value="0.090296" />
                    <Key frame="251" value="26.4" />
                    <Key frame="262" value="48.7823" />
                    <Key frame="272" value="4.3" />
                    <Key frame="282" value="0.090296" />
                    <Key frame="294" value="26.4" />
                    <Key frame="303" value="48.7823" />
                    <Key frame="313" value="4.3" />
                    <Key frame="323" value="0.090296" />
                    <Key frame="335" value="26.4" />
                    <Key frame="345" value="48.7823" />
                    <Key frame="355" value="4.3" />
                    <Key frame="365" value="0.090296" />
                    <Key frame="377" value="-39.1" />
                    <Key frame="398" value="-69.349" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="21" value="-78.6607" />
                    <Key frame="32" value="-64.7" />
                    <Key frame="42" value="-21.1795" />
                    <Key frame="62" value="-11.5993" />
                    <Key frame="85" value="-21.1795" />
                    <Key frame="105" value="-11.5993" />
                    <Key frame="127" value="-21.1795" />
                    <Key frame="147" value="-11.5993" />
                    <Key frame="170" value="-21.1795" />
                    <Key frame="190" value="-11.5993" />
                    <Key frame="204" value="-88.5" />
                    <Key frame="219" value="-7.91266" />
                    <Key frame="229" value="-75" />
                    <Key frame="239" value="-14.7682" />
                    <Key frame="251" value="-83.6" />
                    <Key frame="262" value="-7.91266" />
                    <Key frame="272" value="-75" />
                    <Key frame="282" value="-14.7682" />
                    <Key frame="294" value="-83.6" />
                    <Key frame="303" value="-7.91266" />
                    <Key frame="313" value="-75" />
                    <Key frame="323" value="-14.7682" />
                    <Key frame="335" value="-83.6" />
                    <Key frame="345" value="-7.91266" />
                    <Key frame="355" value="-75" />
                    <Key frame="365" value="-14.7682" />
                    <Key frame="377" value="-83.6" />
                    <Key frame="398" value="-24.3436" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="21" value="6.85315" />
                    <Key frame="32" value="-83.1" />
                    <Key frame="42" value="-22.6785" />
                    <Key frame="62" value="-24.0847" />
                    <Key frame="85" value="-22.6785" />
                    <Key frame="105" value="-24.0847" />
                    <Key frame="127" value="-22.6785" />
                    <Key frame="147" value="-24.0847" />
                    <Key frame="170" value="-22.6785" />
                    <Key frame="190" value="-24.0847" />
                    <Key frame="219" value="-6.15002" />
                    <Key frame="239" value="-22.9373" />
                    <Key frame="262" value="-6.15002" />
                    <Key frame="282" value="-22.9373" />
                    <Key frame="303" value="-6.15002" />
                    <Key frame="323" value="-22.9373" />
                    <Key frame="345" value="-6.15002" />
                    <Key frame="365" value="-22.9373" />
                    <Key frame="398" value="4.74374" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                    <Key frame="21" value="0.2" />
                    <Key frame="32" value="0.6" />
                    <Key frame="42" value="0.2648" />
                    <Key frame="62" value="0.264" />
                    <Key frame="85" value="0.2648" />
                    <Key frame="105" value="0.264" />
                    <Key frame="127" value="0.2648" />
                    <Key frame="147" value="0.264" />
                    <Key frame="170" value="0.2648" />
                    <Key frame="190" value="0.264" />
                    <Key frame="204" value="0.13" />
                    <Key frame="219" value="0.678" />
                    <Key frame="229" value="0.3" />
                    <Key frame="239" value="0.6784" />
                    <Key frame="251" value="0.3" />
                    <Key frame="262" value="0.678" />
                    <Key frame="272" value="0.3" />
                    <Key frame="282" value="0.6784" />
                    <Key frame="294" value="0.3" />
                    <Key frame="303" value="0.678" />
                    <Key frame="313" value="0.3" />
                    <Key frame="323" value="0.6784" />
                    <Key frame="335" value="0.3" />
                    <Key frame="345" value="0.678" />
                    <Key frame="355" value="0.3" />
                    <Key frame="365" value="0.6784" />
                    <Key frame="377" value="0.3" />
                    <Key frame="398" value="0.2968" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="23" value="52.4738" />
                    <Key frame="44" value="-68.2895" />
                    <Key frame="64" value="57.0441" />
                    <Key frame="87" value="-68.2895" />
                    <Key frame="107" value="57.0441" />
                    <Key frame="129" value="-68.2895" />
                    <Key frame="149" value="57.0441" />
                    <Key frame="172" value="-68.2895" />
                    <Key frame="192" value="57.0441" />
                    <Key frame="204" value="69.6" />
                    <Key frame="217" value="100.106" />
                    <Key frame="237" value="106.347" />
                    <Key frame="260" value="100.106" />
                    <Key frame="280" value="106.347" />
                    <Key frame="301" value="100.106" />
                    <Key frame="321" value="106.347" />
                    <Key frame="343" value="100.106" />
                    <Key frame="363" value="106.347" />
                    <Key frame="386" value="67.9" />
                    <Key frame="396" value="84.3785" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="23" value="-15.2956" />
                    <Key frame="34" value="-38.4" />
                    <Key frame="44" value="-18.8112" />
                    <Key frame="54" value="-34.1" />
                    <Key frame="64" value="18" />
                    <Key frame="76" value="-34.1" />
                    <Key frame="87" value="-18.8112" />
                    <Key frame="97" value="-34.1" />
                    <Key frame="107" value="18" />
                    <Key frame="119" value="-34.1" />
                    <Key frame="129" value="-18.8112" />
                    <Key frame="139" value="-34.1" />
                    <Key frame="149" value="18" />
                    <Key frame="161" value="-34.1" />
                    <Key frame="172" value="-18.8112" />
                    <Key frame="182" value="-34.1" />
                    <Key frame="192" value="18" />
                    <Key frame="204" value="-9.5" />
                    <Key frame="217" value="-13.8845" />
                    <Key frame="237" value="-11.2477" />
                    <Key frame="260" value="-13.8845" />
                    <Key frame="280" value="-11.2477" />
                    <Key frame="301" value="-13.8845" />
                    <Key frame="321" value="-11.2477" />
                    <Key frame="343" value="-13.8845" />
                    <Key frame="363" value="-11.2477" />
                    <Key frame="378" value="-26.1" />
                    <Key frame="396" value="-9.40682" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="23" value="34.0996" />
                    <Key frame="34" value="32.5" />
                    <Key frame="44" value="-48.7823" />
                    <Key frame="54" value="-4.3" />
                    <Key frame="64" value="-0.090296" />
                    <Key frame="76" value="-26.4" />
                    <Key frame="87" value="-48.7823" />
                    <Key frame="97" value="-4.3" />
                    <Key frame="107" value="-0.090296" />
                    <Key frame="119" value="-26.4" />
                    <Key frame="129" value="-48.7823" />
                    <Key frame="139" value="-4.3" />
                    <Key frame="149" value="-0.090296" />
                    <Key frame="161" value="-26.4" />
                    <Key frame="172" value="-48.7823" />
                    <Key frame="182" value="-4.3" />
                    <Key frame="192" value="-0.090296" />
                    <Key frame="204" value="94.9" />
                    <Key frame="217" value="21.7996" />
                    <Key frame="237" value="35.4228" />
                    <Key frame="260" value="21.7996" />
                    <Key frame="280" value="35.4228" />
                    <Key frame="301" value="21.7996" />
                    <Key frame="321" value="35.4228" />
                    <Key frame="343" value="21.7996" />
                    <Key frame="363" value="35.4228" />
                    <Key frame="378" value="90.5" />
                    <Key frame="386" value="59.2" />
                    <Key frame="396" value="69.3442" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="23" value="77.1713" />
                    <Key frame="34" value="64.2" />
                    <Key frame="44" value="7.91266" />
                    <Key frame="54" value="75" />
                    <Key frame="64" value="14.7682" />
                    <Key frame="76" value="83.6" />
                    <Key frame="87" value="7.91266" />
                    <Key frame="97" value="75" />
                    <Key frame="107" value="14.7682" />
                    <Key frame="119" value="83.6" />
                    <Key frame="129" value="7.91266" />
                    <Key frame="139" value="75" />
                    <Key frame="149" value="14.7682" />
                    <Key frame="161" value="83.6" />
                    <Key frame="172" value="7.91266" />
                    <Key frame="182" value="75" />
                    <Key frame="192" value="14.7682" />
                    <Key frame="204" value="88.5" />
                    <Key frame="217" value="21.1795" />
                    <Key frame="237" value="11.5993" />
                    <Key frame="260" value="21.1795" />
                    <Key frame="280" value="11.5993" />
                    <Key frame="301" value="21.1795" />
                    <Key frame="321" value="11.5993" />
                    <Key frame="343" value="21.1795" />
                    <Key frame="363" value="11.5993" />
                    <Key frame="378" value="47.1" />
                    <Key frame="386" value="50.8" />
                    <Key frame="396" value="24.6121" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="23" value="-23.03" />
                    <Key frame="34" value="79.8" />
                    <Key frame="44" value="6.15002" />
                    <Key frame="64" value="22.9373" />
                    <Key frame="87" value="6.15002" />
                    <Key frame="107" value="22.9373" />
                    <Key frame="129" value="6.15002" />
                    <Key frame="149" value="22.9373" />
                    <Key frame="172" value="6.15002" />
                    <Key frame="192" value="22.9373" />
                    <Key frame="217" value="22.6785" />
                    <Key frame="237" value="24.0847" />
                    <Key frame="260" value="22.6785" />
                    <Key frame="280" value="24.0847" />
                    <Key frame="301" value="22.6785" />
                    <Key frame="321" value="24.0847" />
                    <Key frame="343" value="22.6785" />
                    <Key frame="363" value="24.0847" />
                    <Key frame="396" value="6.2379" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                    <Key frame="23" value="0.2" />
                    <Key frame="34" value="0.5" />
                    <Key frame="44" value="0.678" />
                    <Key frame="54" value="0.3" />
                    <Key frame="64" value="0.6784" />
                    <Key frame="76" value="0.3" />
                    <Key frame="87" value="0.678" />
                    <Key frame="97" value="0.3" />
                    <Key frame="107" value="0.6784" />
                    <Key frame="119" value="0.3" />
                    <Key frame="129" value="0.678" />
                    <Key frame="139" value="0.3" />
                    <Key frame="149" value="0.6784" />
                    <Key frame="161" value="0.3" />
                    <Key frame="172" value="0.678" />
                    <Key frame="182" value="0.3" />
                    <Key frame="192" value="0.6784" />
                    <Key frame="204" value="0.13" />
                    <Key frame="217" value="0.2648" />
                    <Key frame="237" value="0.264" />
                    <Key frame="260" value="0.2648" />
                    <Key frame="280" value="0.264" />
                    <Key frame="301" value="0.2648" />
                    <Key frame="321" value="0.264" />
                    <Key frame="343" value="0.2648" />
                    <Key frame="363" value="0.264" />
                    <Key frame="386" value="0.24" />
                    <Key frame="396" value="0.2976" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                    <Key frame="18" value="-25.3983" />
                    <Key frame="40" value="-21.3553" />
                    <Key frame="60" value="-20.4764" />
                    <Key frame="83" value="-21.3553" />
                    <Key frame="103" value="-20.4764" />
                    <Key frame="125" value="-21.3553" />
                    <Key frame="145" value="-20.4764" />
                    <Key frame="168" value="-21.3553" />
                    <Key frame="188" value="-20.4764" />
                    <Key frame="215" value="-21.3553" />
                    <Key frame="235" value="-20.4764" />
                    <Key frame="258" value="-21.3553" />
                    <Key frame="278" value="-20.4764" />
                    <Key frame="299" value="-21.3553" />
                    <Key frame="319" value="-20.4764" />
                    <Key frame="341" value="-21.3553" />
                    <Key frame="361" value="-20.4764" />
                    <Key frame="394" value="-9.75358" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                    <Key frame="18" value="0.266079" />
                    <Key frame="40" value="-8.25942" />
                    <Key frame="60" value="18.8991" />
                    <Key frame="83" value="-8.25942" />
                    <Key frame="103" value="18.8991" />
                    <Key frame="125" value="-8.25942" />
                    <Key frame="145" value="18.8991" />
                    <Key frame="168" value="-8.25942" />
                    <Key frame="188" value="18.8991" />
                    <Key frame="215" value="17.0486" />
                    <Key frame="235" value="-8.08844" />
                    <Key frame="258" value="17.0486" />
                    <Key frame="278" value="-8.08844" />
                    <Key frame="299" value="17.0486" />
                    <Key frame="319" value="-8.08844" />
                    <Key frame="341" value="17.0486" />
                    <Key frame="361" value="-8.08844" />
                    <Key frame="394" value="5.89115" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                    <Key frame="18" value="-8.78677" />
                    <Key frame="40" value="10.6373" />
                    <Key frame="60" value="8.44001" />
                    <Key frame="83" value="10.6373" />
                    <Key frame="103" value="8.44001" />
                    <Key frame="125" value="10.6373" />
                    <Key frame="145" value="8.44001" />
                    <Key frame="168" value="10.6373" />
                    <Key frame="188" value="8.44001" />
                    <Key frame="215" value="5.79845" />
                    <Key frame="235" value="14.8513" />
                    <Key frame="258" value="5.79845" />
                    <Key frame="278" value="14.8513" />
                    <Key frame="299" value="5.79845" />
                    <Key frame="319" value="14.8513" />
                    <Key frame="341" value="5.79845" />
                    <Key frame="361" value="14.8513" />
                    <Key frame="394" value="8.00056" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                    <Key frame="18" value="23.201" />
                    <Key frame="40" value="-5.18802" />
                    <Key frame="60" value="-4.57277" />
                    <Key frame="83" value="-5.18802" />
                    <Key frame="103" value="-4.57277" />
                    <Key frame="125" value="-5.18802" />
                    <Key frame="145" value="-4.57277" />
                    <Key frame="168" value="-5.18802" />
                    <Key frame="188" value="-4.57277" />
                    <Key frame="215" value="-5.18321" />
                    <Key frame="235" value="-5.18321" />
                    <Key frame="258" value="-5.18321" />
                    <Key frame="278" value="-5.18321" />
                    <Key frame="299" value="-5.18321" />
                    <Key frame="319" value="-5.18321" />
                    <Key frame="341" value="-5.18321" />
                    <Key frame="361" value="-5.18321" />
                    <Key frame="394" value="-4.48488" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                    <Key frame="18" value="-2.63916" />
                    <Key frame="40" value="2.54646" />
                    <Key frame="60" value="9.22623" />
                    <Key frame="83" value="2.54646" />
                    <Key frame="103" value="9.22623" />
                    <Key frame="125" value="2.54646" />
                    <Key frame="145" value="9.22623" />
                    <Key frame="168" value="2.54646" />
                    <Key frame="188" value="9.22623" />
                    <Key frame="215" value="5.27591" />
                    <Key frame="235" value="4.74856" />
                    <Key frame="258" value="5.27591" />
                    <Key frame="278" value="4.74856" />
                    <Key frame="299" value="5.27591" />
                    <Key frame="319" value="4.74856" />
                    <Key frame="341" value="5.27591" />
                    <Key frame="361" value="4.74856" />
                    <Key frame="394" value="5.00743" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                    <Key frame="18" value="-1.0523" />
                    <Key frame="40" value="3.60597" />
                    <Key frame="60" value="-14.2361" />
                    <Key frame="83" value="3.60597" />
                    <Key frame="103" value="-14.2361" />
                    <Key frame="125" value="3.60597" />
                    <Key frame="145" value="-14.2361" />
                    <Key frame="168" value="3.60597" />
                    <Key frame="188" value="-14.2361" />
                    <Key frame="215" value="-15.1198" />
                    <Key frame="235" value="5.18321" />
                    <Key frame="258" value="-15.1198" />
                    <Key frame="278" value="5.18321" />
                    <Key frame="299" value="-15.1198" />
                    <Key frame="319" value="5.18321" />
                    <Key frame="341" value="-15.1198" />
                    <Key frame="361" value="5.18321" />
                    <Key frame="394" value="-6.94104" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                    <Key frame="18" value="-6.85315" />
                    <Key frame="40" value="-17.0486" />
                    <Key frame="60" value="8.08844" />
                    <Key frame="83" value="-17.0486" />
                    <Key frame="103" value="8.08844" />
                    <Key frame="125" value="-17.0486" />
                    <Key frame="145" value="8.08844" />
                    <Key frame="168" value="-17.0486" />
                    <Key frame="188" value="8.08844" />
                    <Key frame="215" value="8.25942" />
                    <Key frame="235" value="-18.8991" />
                    <Key frame="258" value="8.25942" />
                    <Key frame="278" value="-18.8991" />
                    <Key frame="299" value="8.25942" />
                    <Key frame="319" value="-18.8991" />
                    <Key frame="341" value="8.25942" />
                    <Key frame="361" value="-18.8991" />
                    <Key frame="394" value="-5.53478" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                    <Key frame="18" value="-10.1978" />
                    <Key frame="40" value="5.79845" />
                    <Key frame="60" value="14.8513" />
                    <Key frame="83" value="5.79845" />
                    <Key frame="103" value="14.8513" />
                    <Key frame="125" value="5.79845" />
                    <Key frame="145" value="14.8513" />
                    <Key frame="168" value="5.79845" />
                    <Key frame="188" value="14.8513" />
                    <Key frame="215" value="10.6373" />
                    <Key frame="235" value="8.44001" />
                    <Key frame="258" value="10.6373" />
                    <Key frame="278" value="8.44001" />
                    <Key frame="299" value="10.6373" />
                    <Key frame="319" value="8.44001" />
                    <Key frame="341" value="10.6373" />
                    <Key frame="361" value="8.44001" />
                    <Key frame="394" value="7.55628" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                    <Key frame="18" value="24.4363" />
                    <Key frame="40" value="-5.18321" />
                    <Key frame="60" value="-5.18321" />
                    <Key frame="83" value="-5.18321" />
                    <Key frame="103" value="-5.18321" />
                    <Key frame="125" value="-5.18321" />
                    <Key frame="145" value="-5.18321" />
                    <Key frame="168" value="-5.18321" />
                    <Key frame="188" value="-5.18321" />
                    <Key frame="215" value="-5.18802" />
                    <Key frame="235" value="-4.57277" />
                    <Key frame="258" value="-5.18802" />
                    <Key frame="278" value="-4.57277" />
                    <Key frame="299" value="-5.18802" />
                    <Key frame="319" value="-4.57277" />
                    <Key frame="341" value="-5.18802" />
                    <Key frame="361" value="-4.57277" />
                    <Key frame="394" value="-5.2711" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                    <Key frame="18" value="-2.98591" />
                    <Key frame="40" value="5.27591" />
                    <Key frame="60" value="4.74856" />
                    <Key frame="83" value="5.27591" />
                    <Key frame="103" value="4.74856" />
                    <Key frame="125" value="5.27591" />
                    <Key frame="145" value="4.74856" />
                    <Key frame="168" value="5.27591" />
                    <Key frame="188" value="4.74856" />
                    <Key frame="215" value="2.54646" />
                    <Key frame="235" value="9.22623" />
                    <Key frame="258" value="2.54646" />
                    <Key frame="278" value="9.22623" />
                    <Key frame="299" value="2.54646" />
                    <Key frame="319" value="9.22623" />
                    <Key frame="341" value="2.54646" />
                    <Key frame="361" value="9.22623" />
                    <Key frame="394" value="5.3638" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                    <Key frame="18" value="5.53958" />
                    <Key frame="40" value="15.1198" />
                    <Key frame="60" value="-5.18321" />
                    <Key frame="83" value="15.1198" />
                    <Key frame="103" value="-5.18321" />
                    <Key frame="125" value="15.1198" />
                    <Key frame="145" value="-5.18321" />
                    <Key frame="168" value="15.1198" />
                    <Key frame="188" value="-5.18321" />
                    <Key frame="215" value="-3.60597" />
                    <Key frame="235" value="14.2361" />
                    <Key frame="258" value="-3.60597" />
                    <Key frame="278" value="14.2361" />
                    <Key frame="299" value="-3.60597" />
                    <Key frame="319" value="14.2361" />
                    <Key frame="341" value="-3.60597" />
                    <Key frame="361" value="14.2361" />
                    <Key frame="394" value="6.85796" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                    <Key frame="40" value="-21.3553" />
                    <Key frame="83" value="-21.3553" />
                    <Key frame="125" value="-21.3553" />
                    <Key frame="168" value="-21.3553" />
                    <Key frame="215" value="-21.3553" />
                    <Key frame="258" value="-21.3553" />
                    <Key frame="299" value="-21.3553" />
                    <Key frame="341" value="-21.3553" />
                    <Key frame="394" value="-9.75358" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
              <Resource name="Standing" type="Lock" timeout="1" />
              <Resource name="All motors" type="Lock" timeout="1" />
            </Box>
            <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="278" y="233">
              <bitmap>media/images/box/wait.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
              <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
              <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
              <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
            </Box>
            <Box name="Say (1)" id="3" localization="8" tooltip="Say some text. The text can be localized." x="412" y="235">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Happiness is contagious. Your positive energy is brightening up the room. " default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Delay (1)" id="4" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="540" y="234">
              <bitmap>media/images/box/wait.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
              <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
              <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
              <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
            </Box>
            <Box name="Say (2)" id="5" localization="8" tooltip="Say some text. The text can be localized." x="129" y="362">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I&apos;d like to celebrate your happiness with a dance!  " default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Delay (2)" id="6" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="277" y="367">
              <bitmap>media/images/box/wait.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
              <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
              <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
              <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
            </Box>
            <Box name="Delay (3)" id="7" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="549" y="361">
              <bitmap>media/images/box/wait.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
              <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
              <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
              <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
            </Box>
            <Box name="Say (3)" id="8" localization="8" tooltip="Say some text. The text can be localized." x="413" y="363">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Get ready for some moves that match the mood. Here we go." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Goto Posture (1)" id="9" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="281" y="519">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
              <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                <Choice value="Crouch" />
                <Choice value="LyingBack" />
                <Choice value="LyingBelly" />
                <Choice value="Sit" />
                <Choice value="SitRelax" />
                <Choice value="StandInit" />
                <Choice value="Stand" />
                <Choice value="StandZero" />
              </Parameter>
              <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
              <Resource name="All motors" type="Lock" timeout="0" />
              <Resource name="Stiffness" type="Lock" timeout="0" />
            </Box>
            <Box name="Say (4)" id="10" localization="8" tooltip="Say some text. The text can be localized." x="417" y="517">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Take care and have a great day! " default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Play Sound" id="11" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="122" y="584">
              <bitmap>media/images/box/interaction/play_music.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
              <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../instrumental-super-disco.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
              <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
              <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
              <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
              <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                        <bitmap>media/images/box/interaction/play_music.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                        <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                        <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                        <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                      </Box>
                      <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                        <bitmap>media/images/box/folder.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                        <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                      </Box>
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="Audio player" type="Lock" timeout="0" />
            </Box>
            <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="123" y="124">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Hello, I am NAO. It’s great to know that you are happy. " default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Happy" id="12" localization="8" tooltip="ID : #02A 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Happy" x="126" y="230">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="53">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="FaceLeds" index="1">
                    <Diagram scale="100">
                      <Box name="laugh" id="1" localization="8" tooltip="laugh" x="123" y="42">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.bMustStop = False;
        self.bIsRunning = False;

    def onLoad(self):
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self):
        if( self.bIsRunning ):

            return;

        rDuration = 0.2;
        self.bMustStop = False;
        self.bIsRunning = True;

        while( not self.bMustStop ):
            self.leds.fadeRGB( "FaceLed0", 0x787e9d, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed1", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed2", 0x2ec1e9, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed4", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed5", 0x1e9980, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed6", 0x000000, rDuration, _async=True );
            self.leds.fadeRGB( "FaceLed7", 0x000000, rDuration, _async=True );

            #time.sleep( 0.1 );

            self.leds.fadeRGB( "FaceLed0", 0x0400a1, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed1", 0x14a176, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed2", 0x000022, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed3", 0x000000, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed4", 0x00000e, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed5", 0x56ffff, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed6", 0x000020, rDuration*2, _async=True );
            self.leds.fadeRGB( "FaceLed7", 0x000038, rDuration*2 );


            if( self.bMustStop ):
                break;

        self.bIsRunning = False;
        self.onStopped();

    def onInput_onStop(self):
        self.bMustStop = True;]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                    <Key frame="19" value="-13" />
                    <Key frame="34" value="7" />
                    <Key frame="53" value="-0.881321" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                    <Key frame="19" value="7.29261" />
                    <Key frame="34" value="-8" />
                    <Key frame="53" value="-10.3736" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                    <Key frame="9" value="84.901" />
                    <Key frame="17" value="80.5064" />
                    <Key frame="25" value="84.8131" />
                    <Key frame="32" value="81.9127" />
                    <Key frame="51" value="85.1647" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                    <Key frame="9" value="35.8574" />
                    <Key frame="17" value="8.17153" />
                    <Key frame="25" value="34.0117" />
                    <Key frame="32" value="9.31412" />
                    <Key frame="51" value="4.91953" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                    <Key frame="9" value="-50.628" />
                    <Key frame="17" value="-59.5051" />
                    <Key frame="25" value="-50.8917" />
                    <Key frame="32" value="-58.7141" />
                    <Key frame="51" value="-64.8665" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                    <Key frame="9" value="-39.1973" />
                    <Key frame="17" value="-80.5943" />
                    <Key frame="25" value="-39.3731" />
                    <Key frame="32" value="-79.3638" />
                    <Key frame="51" value="-21.8826" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                    <Key frame="17" value="-6.4185" />
                    <Key frame="32" value="-6.4185" />
                    <Key frame="51" value="-7.38531" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                    <Key frame="17" value="0.110572" />
                    <Key frame="32" value="0.110935" />
                    <Key frame="51" value="0.112026" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                    <Key frame="7" value="79.3686" />
                    <Key frame="15" value="85.3453" />
                    <Key frame="23" value="81.2144" />
                    <Key frame="30" value="85.4332" />
                    <Key frame="49" value="88.1578" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                    <Key frame="7" value="-7.20953" />
                    <Key frame="15" value="-34.1923" />
                    <Key frame="23" value="-8.26423" />
                    <Key frame="30" value="-32.6102" />
                    <Key frame="49" value="-3.07861" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                    <Key frame="7" value="60.3792" />
                    <Key frame="15" value="50.799" />
                    <Key frame="23" value="59.6761" />
                    <Key frame="30" value="51.0627" />
                    <Key frame="49" value="85.6041" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                    <Key frame="7" value="81.7417" />
                    <Key frame="15" value="39.2021" />
                    <Key frame="23" value="80.4233" />
                    <Key frame="30" value="39.5537" />
                    <Key frame="49" value="26.0184" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                    <Key frame="15" value="0.173379" />
                    <Key frame="30" value="0.173379" />
                    <Key frame="49" value="-0.266079" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                    <Key frame="15" value="0.221844" />
                    <Key frame="30" value="0.221844" />
                    <Key frame="49" value="0.221116" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                    <Key frame="16" value="-20.2127" />
                    <Key frame="31" value="-20.2127" />
                    <Key frame="50" value="-18.367" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                    <Key frame="16" value="14.0651" />
                    <Key frame="31" value="-0.705538" />
                    <Key frame="50" value="6.15482" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                    <Key frame="16" value="1.58446" />
                    <Key frame="31" value="-6.59428" />
                    <Key frame="50" value="11.8678" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                    <Key frame="16" value="2.98591" />
                    <Key frame="31" value="27.3367" />
                    <Key frame="50" value="-5.29104" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                    <Key frame="16" value="7.99574" />
                    <Key frame="31" value="-8.4352" />
                    <Key frame="50" value="6.76526" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                    <Key frame="16" value="-13.445" />
                    <Key frame="31" value="1.0523" />
                    <Key frame="50" value="-5.09532" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                    <Key frame="16" value="0.79343" />
                    <Key frame="31" value="-13.9772" />
                    <Key frame="50" value="-3.60116" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                    <Key frame="16" value="-6.68218" />
                    <Key frame="31" value="1.76024" />
                    <Key frame="50" value="12.2145" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                    <Key frame="16" value="27.3367" />
                    <Key frame="31" value="2.98591" />
                    <Key frame="50" value="-4.48007" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                    <Key frame="16" value="-8.61098" />
                    <Key frame="31" value="8.08363" />
                    <Key frame="50" value="6.33061" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                    <Key frame="16" value="-1.0523" />
                    <Key frame="31" value="13.445" />
                    <Key frame="50" value="3.16651" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
              <Resource name="Standing" type="Lock" timeout="1" />
              <Resource name="All motors" type="Lock" timeout="1" />
              <Resource name="Left eye leds" type="Lock" timeout="1" />
              <Resource name="Right eye leds" type="Lock" timeout="1" />
            </Box>
            <Link inputowner="3" indexofinput="2" outputowner="14" indexofoutput="4" />
            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
            <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="16" indexofinput="2" outputowner="7" indexofoutput="4" />
            <Link inputowner="9" indexofinput="2" outputowner="16" indexofoutput="4" />
            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
            <Link inputowner="11" indexofinput="2" outputowner="7" indexofoutput="4" />
            <Link inputowner="11" indexofinput="3" outputowner="16" indexofoutput="4" />
            <Link inputowner="9" indexofinput="2" outputowner="11" indexofoutput="4" />
            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
